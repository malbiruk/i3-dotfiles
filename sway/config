# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# Your preferred application launcher
# set $menu exec $term --class=launcher -e bash -c 'compgen -c | grep -v fzf | sort -u | fzf --layout=reverse | xargs -r swaymsg -t command exec'
set $menu exec wofi -S drun
set $window_search exec /home/klim/.config/sway/scripts/windows.py

for_window [app_id="^launcher$"] floating enable
focus_on_window_activation focus

### Output configuration (wallpaper)
#
exec_always bash -c "cd /home/klim/Pictures/Wallpapers/noise_wp/ && source .venv/bin/activate && python glitchy_wp.py"
output * bg /home/klim/Pictures/Wallpapers/noise_wp/dark_glitch_wallpaper.png fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
exec swayidle -w \
         timeout 300 'swaylock -i /home/klim/Pictures/Wallpapers/noise_wp/dark_glitch_wallpaper.png -kl' \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'swaylock -f -c 000000 -kl'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
    input type:touchpad {
        dwt enabled
        tap enabled
        drag_lock disabled
        clickfinger_button_map lrm
        natural_scroll enabled
        middle_emulation enabled
    }

    bindgesture swipe:up $window_search
    bindgesture swipe:down $menu


    input type:keyboard {
        xkb_layout us,ru
        xkb_options grp:win_space_toggle
    }

#
# You can also configure each device individually.
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term
    bindsym $mod+Shift+Return exec $term --class=launcher

    # Kill focused window
    bindsym $mod+q kill

    # Launchers
    bindsym $mod+d $menu
    bindsym $mod+Shift+d exec wofi -S run
    bindsym Mod1+Tab $window_search
    bindsym $mod+Shift+f exec find . -type f -not -path '*/.*' -printf '%T@ %p\n' 2>/dev/null | sort -nr | cut -d' ' -f2- | awk -F'/' '{print $(NF) " (" substr($0, 1, length($0)-length($(NF))-1) ")";}' | wofi -d -i -W "50%" | sed 's/.* (\(.*\))\/.*/\1/' | xargs -r xdg-open
    bindsym $mod+Shift+q exec /home/klim/.config/sway/scripts/logout_menu.sh

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier Mod1 normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
set $1 1
set $2 2
set $3 3
set $4 4
set $5 5
set $6 6
set $7 7
set $8 8
set $9 9
set $10 0

# switch to workspace
bindsym $mod+1 workspace $1
bindsym $mod+2 workspace $2
bindsym $mod+3 workspace $3
bindsym $mod+4 workspace $4
bindsym $mod+5 workspace $5
bindsym $mod+6 workspace $6
bindsym $mod+7 workspace $7
bindsym $mod+8 workspace $8
bindsym $mod+9 workspace $9
bindsym $mod+0 workspace $10

# move focused container to workspace
bindsym $mod+Control+1 move container to workspace $1
bindsym $mod+Control+2 move container to workspace $2
bindsym $mod+Control+3 move container to workspace $3
bindsym $mod+Control+4 move container to workspace $4
bindsym $mod+Control+5 move container to workspace $5
bindsym $mod+Control+6 move container to workspace $6
bindsym $mod+Control+7 move container to workspace $7
bindsym $mod+Control+8 move container to workspace $8
bindsym $mod+Control+9 move container to workspace $9
bindsym $mod+Control+0 move container to workspace $10

#move focused container to workspace and switch to that workspace
bindsym $mod+Shift+1 move container to workspace $1; workspace $1
bindsym $mod+Shift+2 move container to workspace $2; workspace $2
bindsym $mod+Shift+3 move container to workspace $3; workspace $3
bindsym $mod+Shift+4 move container to workspace $4; workspace $4
bindsym $mod+Shift+5 move container to workspace $5; workspace $5
bindsym $mod+Shift+6 move container to workspace $6; workspace $6
bindsym $mod+Shift+7 move container to workspace $7; workspace $7
bindsym $mod+Shift+8 move container to workspace $8; workspace $8
bindsym $mod+Shift+9 move container to workspace $9; workspace $9
bindsym $mod+Shift+0 move container to workspace $10; workspace $10

# Navigate workspaces dynamically
bindsym $mod+equal exec ~/.config/sway/scripts/dynamic-workspace.sh next
bindsym $mod+minus exec ~/.config/sway/scripts/dynamic-workspace.sh prev

# Move container AND follow to workspace
bindsym $mod+Shift+equal exec ~/.config/sway/scripts/dynamic-workspace.sh next true true
bindsym $mod+Shift+minus exec ~/.config/sway/scripts/dynamic-workspace.sh prev true true

# Move container but STAY on current workspace
bindsym $mod+Ctrl+equal exec ~/.config/sway/scripts/dynamic-workspace.sh next true false
bindsym $mod+Ctrl+minus exec ~/.config/sway/scripts/dynamic-workspace.sh prev true false

# Gestures
bindgesture swipe:right exec ~/.config/sway/scripts/dynamic-workspace.sh prev
bindgesture swipe:left exec ~/.config/sway/scripts/dynamic-workspace.sh next

# floating things
for_window [workspace=$10] floating enable
bindsym $mod+u exec ~/.config/sway/scripts/floating-workspace.sh enable
bindsym $mod+Shift+u exec ~/.config/sway/scripts/floating-workspace.sh disable

# move focused workspace between monitors
bindsym $mod+Ctrl+greater move workspace to output right
bindsym $mod+Ctrl+less move workspace to output left

# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+e layout toggle tabbed split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym Mod1+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym Mod1+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent

    # Move focus to the child container
    bindsym $mod+w focus child
#
# Scratchpad:
#
# scratchpad
bindsym $mod+Shift+Tab move scratchpad
bindsym $mod+Tab scratchpad show

# Store to scratchpad slots
bindsym $mod+Shift+F1 mark --add --toggle 1, move scratchpad
bindsym $mod+Shift+F2 mark --add --toggle 2, move scratchpad
bindsym $mod+Shift+F3 mark --add --toggle 3, move scratchpad
bindsym $mod+Shift+F4 mark --add --toggle 4, move scratchpad
bindsym $mod+Shift+F5 mark --add --toggle 5, move scratchpad
bindsym $mod+Shift+F6 mark --add --toggle 6, move scratchpad
bindsym $mod+Shift+F7 mark --add --toggle 7, move scratchpad
bindsym $mod+Shift+F8 mark --add --toggle 8, move scratchpad
bindsym $mod+Shift+F9 mark --add --toggle 9, move scratchpad
bindsym $mod+Shift+F10 mark --add --toggle 10, move scratchpad
bindsym $mod+Shift+F11 mark --add --toggle 11, move scratchpad
bindsym $mod+Shift+F12 mark --add --toggle 12, move scratchpad

# Show scratchpad slots
bindsym $mod+F1 [con_mark="1"] scratchpad show
bindsym $mod+F2 [con_mark="2"] scratchpad show
bindsym $mod+F3 [con_mark="3"] scratchpad show
bindsym $mod+F4 [con_mark="4"] scratchpad show
bindsym $mod+F5 [con_mark="5"] scratchpad show
bindsym $mod+F6 [con_mark="6"] scratchpad show
bindsym $mod+F7 [con_mark="7"] scratchpad show
bindsym $mod+F8 [con_mark="8"] scratchpad show
bindsym $mod+F9 [con_mark="9"] scratchpad show
bindsym $mod+F10 [con_mark="10"] scratchpad show
bindsym $mod+F11 [con_mark="11"] scratchpad show
bindsym $mod+F12 [con_mark="12"] scratchpad show

# Remove mark and bring back to workspace
bindsym $mod+Ctrl+F1 [con_mark="1"] unmark 1, floating toggle
bindsym $mod+Ctrl+F2 [con_mark="2"] unmark 2, floating toggle
bindsym $mod+Ctrl+F3 [con_mark="3"] unmark 3, floating toggle
bindsym $mod+Ctrl+F4 [con_mark="4"] unmark 4, floating toggle
bindsym $mod+Ctrl+F5 [con_mark="5"] unmark 5, floating toggle
bindsym $mod+Ctrl+F6 [con_mark="6"] unmark 6, floating toggle
bindsym $mod+Ctrl+F7 [con_mark="7"] unmark 7, floating toggle
bindsym $mod+Ctrl+F8 [con_mark="8"] unmark 8, floating toggle
bindsym $mod+Ctrl+F9 [con_mark="9"] unmark 9, floating toggle
bindsym $mod+Ctrl+F10 [con_mark="10"] unmark 10, floating toggle
bindsym $mod+Ctrl+F11 [con_mark="11"] unmark 11, floating toggle
bindsym $mod+Ctrl+F12 [con_mark="12"] unmark 12, floating toggle

#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

#
# Utilities:
#
    # Special keys to adjust volume via PulseAudio
    bindsym --locked XF86AudioMute exec pactl set-sink-mute \@DEFAULT_SINK@ toggle
    bindsym --locked XF86AudioLowerVolume exec pactl set-sink-volume \@DEFAULT_SINK@ -5%
    bindsym --locked XF86AudioRaiseVolume exec bash -c 'vol=$(pactl get-sink-volume @DEFAULT_SINK@ | grep -oP "\d+%" | head -1 | tr -d "%"); new=$((vol+5)); [ $new -gt 250 ] && new=250; pactl set-sink-volume @DEFAULT_SINK@ ${new}%'
    bindsym --locked XF86AudioMicMute exec pactl set-source-mute \@DEFAULT_SOURCE@ toggle
    # Special keys to adjust brightness via brightnessctl
    bindsym --locked XF86MonBrightnessDown exec light -U 5
    bindsym --locked XF86MonBrightnessUp exec light -A 5
    # Special key to take a screenshot with grim
    bindsym Print exec grim

include /usr/local/etc/sway/config.d/*

# Hide cursor
seat seat0 hide_cursor 5000

###############
# R I C I N G #
###############

# font
font pango:Monaco Nerd Font 8.5

# hide edge borders
hide_edge_borders none
default_border pixel 1

# colors
set $black  #0a0c0e
set $white  #00ff00
set $red    #ff6b6b

# window colors
#                       border          background     text             indicator
client.focused          $white          $white         $black           $white
client.unfocused        $black		    $black 	       $white         	$white
client.focused_inactive $black  	    $black 	       $white	    	$white
client.urgent           $black    	    $black 	       $red             $white

# swaybar configuration
bar {
        mode dock
        status_command /home/klim/.config/sway/scripts/status_bar_info.sh
        font pango:Monaco Nerd Font 8.5
        colors {
                background $black
                separator  $black
                statusline $white
        #                          border             background         text
                focused_workspace  $black	      $white 		 $black
                inactive_workspace $black             $black		 $white
                urgent_workspace   $black 	      $black             $red
        }
}

# gaps
gaps inner 24
# gaps outer 6
# smart_gaps on

bindsym $mod+g gaps inner current plus 6
bindsym $mod+shift+g gaps inner current minus 6
bindsym $mod+x gaps outer current plus 6
bindsym $mod+shift+x gaps outer current minus 6
bindsym $mod+control+g exec --no-startup-id swaymsg gaps inner current set 0 && swaymsg gaps outer current set 0

# Mako
bindsym $mod+n exec makoctl dismiss
bindsym $mod+Shift+n exec makoctl dismiss -a

# Start programs
exec mako
exec blueman-applet
exec_always dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK
exec --no-startup-id /usr/libexec/xdg-desktop-portal -r
exec /usr/bin/syncthing serve --no-browser --logfile=default
